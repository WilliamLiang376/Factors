# 风险及免责提示：该策略由聚宽用户分享，仅供学习交流使用。
# 原文一般包含策略说明，如有疑问建议到原文和作者交流讨论。
# 克隆自聚宽文章：https://www.joinquant.com/post/16755
# 标题：小盘价值股策略2.01，年化131%，回撤8.8%
# 作者：Gyro

# 本策略请选择 python 2 下回测


def initialize(context):
    set_benchmark('399300.XSHE')
    log.set_level('order', 'error')
    set_option('use_real_price', True)
    set_option("avoid_future_data", True)
    
def after_code_changed(context):
    g.last_update_month = 0
    g.choicenum = 100
    g.weight = {}

def before_trading_start(context):
    def sum_func(X):
        return X[0] + (X[1] + X[2] + X[3])/3
    # monthly update
    if g.last_update_month == context.current_dt.month:
        return
    g.last_update_month = context.current_dt.month
    # all stocks
    stk_sh = get_index_stocks('000001.XSHG')
    stk_sz = get_index_stocks('399106.XSHE')
    allstocks = stk_sh + stk_sz
    # stock pool
    df = get_fundamentals(query(
            valuation.code,
            valuation.market_cap,
            valuation.pb_ratio,
            valuation.pe_ratio,
            valuation.pcf_ratio,
        ).filter(
            valuation.code.in_(allstocks),
            valuation.pb_ratio>0,
            valuation.pe_ratio>0,
            valuation.pcf_ratio>0,
        )).dropna()
    # small - valuable
    df['point'] = df[['market_cap', 'pb_ratio', 'pe_ratio', 'pcf_ratio']] \
        .rank().T.apply(sum_func)
    df = df.sort_index(by='point').head(g.choicenum)
    stocks = list(df['code'])
    # weight
    g.weight = dict(zip(stocks, ones(g.choicenum)/g.choicenum))

def handle_data(context, data):
    # clear non-choice
    for stock in context.portfolio.positions.keys():
        if not g.weight.has_key(stock):
            log.info('sell out ', stock)
            order_target(stock, 0);
    # buy and rebalance
    for stock in g.weight.keys():
        position = g.weight[stock] * context.portfolio.total_value
        if not context.portfolio.positions.has_key(stock):
            log.info('buy ', stock)
            order_target_value(stock, position) # buy
        elif abs(position - context.portfolio.positions[stock].value)/position > 0.1:
            log.info('rebalance ', stock)
            order_target_value(stock, position) # rebalance
# end