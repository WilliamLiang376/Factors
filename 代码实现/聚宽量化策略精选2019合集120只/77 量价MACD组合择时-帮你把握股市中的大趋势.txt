# 风险及免责提示：该策略由聚宽用户分享，仅供学习交流使用。
# 原文一般包含策略说明，如有疑问建议到原文和作者交流讨论。
# 克隆自聚宽文章：https://www.joinquant.com/post/19797
# 标题：量价MACD组合择时-帮你把握股市中的大趋势
# 作者：了凡川

# 导入函数库
from jqdata import *
import talib as ta

# 初始化函数，设定基准等等
def initialize(context):
    set_option("avoid_future_data", True)
    # 设定沪深300作为基准
    set_benchmark('000300.XSHG')
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 过滤掉order系列API产生的比error级别低的log
    # log.set_level('order', 'error')

    ### 股票相关设定 ###
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')

    ## 运行函数（reference_security为运行时间的参考标的；传入的标的只做种类区分，因此传入'000300.XSHG'或'510300.XSHG'是一样的）
      # 开盘前运行
    run_daily(before_market_open, time='before_open', reference_security='000300.XSHG')
      # 开盘时运行
    run_daily(market_open, time='14:50', reference_security='000300.XSHG')
      # 收盘后运行
    run_daily(after_market_close, time='after_close', reference_security='000300.XSHG')

## 开盘前运行函数
def before_market_open(context):
    # 输出运行时间
    log.info('函数运行时间(before_market_open)：'+str(context.current_dt.time()))

    # 给微信发送消息（添加模拟交易，并绑定微信生效）
    # send_message('美好的一天~')

    # 要操作的股票：平安银行（g.为全局变量）
    g.security = '510300.XSHG'

## 开盘时运行函数
def market_open(context):
    log.info('函数运行时间(market_open):'+str(context.current_dt.time()))
    security = g.security
   
    # 取得当前的现金
    cash = context.portfolio.available_cash
    
    sgn=get_signal(context,'000300.XSHG')

    # 如果上一时间点价格高出五天平均价1%, 则全仓买入
    if sgn == 1:
        # 记录这次买入
        log.info("价格高于均价 1%%, 买入 %s" % (security))
        # 用所有 cash 买入股票
        order_value(security, cash)
    # 如果上一时间点价格低于五天平均价, 则空仓卖出
    elif (sgn>0) and (sgn<1) and (context.portfolio.positions[security].closeable_amount > 0):
        pos_vol=context.portfolio.positions[security].closeable_amount/context.portfolio.positions[security].price
        order_target(security, pos_vol*sgn)
    elif sgn < 0 and context.portfolio.positions[security].closeable_amount > 0:
        # 记录这次卖出
        log.info("价格低于均价, 卖出 %s" % (security))
        # 卖出所有股票,使这只股票的最终持有量为0
        order_target(security, 0)

## 运行选股程序
def choose_sec():
    pass

## 获取交易信号
def get_signal(context,sec="000300.XSHG"):
    trade_date=context.previous_date
    current_data = get_current_data()
    df=get_price(security=sec, start_date=None, 
    end_date=trade_date, frequency='5d', 
    fields=['open', 'close', 'low', 'high','volume'], skip_paused=True, fq='pre', count=60)
    
    # 获取最新交易价格
    close=current_data[sec].last_price 
    #使用上周期数据加最新数据组合一个数据
    row={'open':df['open'][-1], 'close':close, 'low':df['low'][-1], 'high':df['high'][-1]}
    # 将最新价格纳入计算
    df.append(row,ignore_index=True)

    df['DIFF'],df['DEA'],df['MACD']=ta.MACD(df['close'].values,fastperiod=12, slowperiod=26, signalperiod=9)
    df['MACD']=2*df['MACD']
    df['VDIFF'],df['VDEA'],df['VMACD']=ta.MACD(df['volume'].values,fastperiod=12, slowperiod=26, signalperiod=9)
    df['VMACD']=2*df['VMACD']
 
    # 判断信号
    #短趋势与中线分离上穿，发出买入信号
    if (df['MACD'][-1]>0)  :
        if (df['VMACD'][-1]>0)  :
            return 1
        else:
            return 0.5
    elif (df['MACD'][-1]<0):
        return -1 
    else:
        return 0
    

## 收盘后运行函数
def after_market_close(context):
    log.info(str('函数运行时间(after_market_close):'+str(context.current_dt.time())))
    #得到当天所有成交记录
    trades = get_trades()
    for _trade in trades.values():
        log.info('成交记录：'+str(_trade))
    log.info('一天结束')
    log.info('##############################################################')
