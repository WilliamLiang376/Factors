# 风险及免责提示：该策略由聚宽用户分享，仅供学习交流使用。
# 原文一般包含策略说明，如有疑问建议到原文和作者交流讨论。
# 克隆自聚宽文章：https://www.joinquant.com/post/16999
# 标题：年化15.48%，盈亏比3.818的双均线策略
# 作者：lsydmn

# 导入所需要的函数库
from jqdata import *


# 初始化部分
def initialize(context):
    # 设定双均线策略标的为沪深300ETF
    g.security = '510310.XSHG'
    # 设定沪深300为基准
    set_benchmark('000300.XSHG')
    # 开启动态复权模式（真实价格）
    set_option('use_real_price', True) 
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 按时运行函数
    # 开盘前运行
    run_daily(before_market_open, time = 'before_open', reference_security = '000300.XSHG')
    # 开盘时运行
    run_daily(market_open, time = 'open', reference_security = '000300.XSHG')
    # 收盘后运行
    run_daily(after_market_close, time = 'after_close', reference_security = '000300.XSHG')


# 开盘前运行函数
def before_market_open(context):
    # 输出运行时间
    log.info('函数运行时间(before_market_open)：'+str(context.current_dt.time()))

    # 给微信发送消息（添加模拟交易，并绑定微信生效）
    # send_message('美好的一天~')


# 开盘时运行函数
def market_open(context):
    # 获取前10天的收盘价
    close_data = get_price(g.security, end_date = context.previous_date, count = 5, fields = ['close'])
    # 计算平均值
    ma1 = close_data['close'].mean()
    # 获取前2天至前11天的收盘价
    close_data = get_price(g.security, end_date = context.previous_date - datetime.timedelta(days = 1), count = 5,fields = ['close'])
    # 计算平均值
    pre_ma1 = close_data['close'].mean()
    # 获取前60天的收盘价
    close_data = get_price(g.security, end_date = context.previous_date, count = 60, fields = ['close'])
    # 计算平均值
    ma2 = close_data['close'].mean()
    # 获取前2天至前61天收盘价
    close_data = get_price(g.security, end_date = context.previous_date - datetime.timedelta(days = 1), count = 60,fields = ['close'])
    # 计算平均值
    pre_ma2 = close_data['close'].mean()
    # 获取当前现金
    cash = context.portfolio.available_cash
    # 获取买卖点位，进行买卖
    # 短线crossover长线，全部买入
    if ma1 > ma2 and pre_ma1 < pre_ma2:
        # 记录这次买入
        log.info("短线crossover长线, 买入 %s" % (g.security))
        # 用所有cash买入股票
        order_value(g.security, cash)
    # 短线crossunder长线，全部卖出
    elif ma1 < ma2 and pre_ma1 > pre_ma2 and context.portfolio.positions[g.security].closeable_amount > 0:
        # 记录这次卖出
        log.info("短线crossunder长线, 卖出 %s" % (g.security))
        # 卖出所有股票,使这只股票的最终持有量为0
        order_target(g.security, 0)


# 收盘后运行函数
def after_market_close(context):
    # 输出运行时间
    log.info(str('函数运行时间(after_market_close):'+str(context.current_dt.time())))
    # 得到当天所有成交记录
    trades = get_trades()
    for _trade in trades.values():
        log.info('成交记录：'+str(_trade))
    log.info('一天结束')
    log.info('##############################################################')

