# 风险及免责提示：该策略由聚宽用户分享，仅供学习交流使用。
# 原文一般包含策略说明，如有疑问建议到原文和作者交流讨论。
# 克隆自聚宽文章：https://www.joinquant.com/post/21269
# 标题：行业指数轮动
# 作者：那時花開海布裡
# 回测请选择 分钟  ，资金选择 100万 。

'''
=================================================
总体回测前设置参数和回测
=================================================
'''
def initialize(context):
    set_option("avoid_future_data", True)
    set_params()    #1设置策参数
    set_variables() #2设置中间变量
    set_backtest()  #3设置回测条件

#1 设置参数
def set_params():
    # 设置基准收益
    set_benchmark('000300.XSHG') 
    g.lag = 10
    g.bars = 20
    g.hour = 14
    g.minute = 15
    g.xf = '000932.XSHG' # 中证消费
    g.yy = '000913.XSHG' # 300医药
    g.jg = '399967.XSHE' # 军工
    g.xx = '000993.XSHG' # 全指信息
    g.js = '000819.XSHG' # 有色金属
    g.zq = '399975.XSHE' # 证券公司
    g.cm = '399971.XSHE' # 中证传媒
    g.stocks = [g.xf,g.yy,g.jg,g.xx,g.js,g.zq,g.cm]
    
    g.ETFxf = '000932.XSHG' #消费ETF
    g.ETFjs = '000819.XSHG' #有色金属
    g.ETFzq = '399975.XSHE' #
    g.ETFcm = '399971.XSHE'
    g.ETFyy = '000913.XSHG'
    g.ETFjg = '399967.XSHE'
    g.ETFxx = '000993.XSHG'
    g.ETFs = {g.xf:g.ETFxf,g.yy:g.ETFyy,g.jg:g.ETFjg,g.xx:g.ETFxx,g.js:g.ETFjs,g.zq:g.ETFzq,g.cm:g.ETFcm}
    g.ETFrili = '511880.XSHG' #银华日利
    

#2 设置中间变量
def set_variables():
    return

#3 设置回测条件
def set_backtest():
    set_option('use_real_price', True) #用真实价格交易
    log.set_level('order', 'error')



'''
=================================================
每天开盘前
=================================================
'''
#每天开盘前要做的事情
def before_trading_start(context):
    set_slip_fee(context) 

#4 
# 根据不同的时间段设置滑点与手续费

def set_slip_fee(context):
    # 将滑点设置为0
    set_slippage(FixedSlippage(0)) 
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5)) 
        
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
            
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
                
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))




'''
=================================================
每日交易时
=================================================
''' 
def handle_data(context, data):
    # 获得当前时间
    hour = context.current_dt.hour
    minute = context.current_dt.minute
    e = g.ETFs
   
    # 每天收盘时调整仓位
    if hour == g.hour and minute == g.minute:
        signal = get_signal(context)
        holdrili = context.portfolio.positions[g.ETFrili].total_amount
        if signal == 'sell_the_stocks'and holdrili == 0:
            sell_the_stocks(context)
            buy_the_stocks(context,'511880.XSHG')
        elif signal == 'sell_the_stocks'and holdrili!=0:
            print('rilibudong')
            return
        else:
            buy_the_stocks(context,e[signal])


#5
#获取信号
def get_signal(context):
    a =[]
    h = {}
    stocks = g.stocks
    for stock in stocks:
         #查询13天前价格和现在价格
        hs300,cp300 = getStockPrice(stock, g.lag)
        #计算前13日变动
        hs300increase = (cp300 - hs300) / hs300
        h.update({stock: hs300increase})
    for k in sorted(h,key=h.__getitem__,reverse=True):
        a.append(k)
    zq,dq = getStockPrice(a[0], g.lag)
    av = getStockAvPrice(a[0], g.bars)
    if dq-av>0:
        print(a[0])
        return str(a[0])
    else:
        print('sell_the_stocks') 
        return 'sell_the_stocks'

#6
#取得股票某个区间内的所有收盘价（用于取前13日和当前价格）
def getStockPrice(stock, interval):
    h = attribute_history(stock, interval*240, unit='1m', fields=('close'), skip_paused=True)
    return (h['close'].values[0],h['close'].values[-1])

def getCurrentPrice(stock):
    h= attribute_history(stock, 1, unit='1m', fields=('close'), skip_paused=True)
    return (h['close'].values[-1])

def getStockAvPrice(stock, interval):
    h = attribute_history(stock, interval*240, unit='1m', fields=('close'), skip_paused=True)
    return h['close'].mean()

#7
#卖出股票
def sell_the_stocks(context):
    for stock in context.portfolio.positions.keys():
        return (log.info("Selling %s" % stock), order_target_value(stock, 0))
#买入股票
def buy_the_stocks(context,signal):
    holdrili = context.portfolio.positions[g.ETFrili].total_amount
    holdsig = context.portfolio.positions[signal].total_amount
    prili = getCurrentPrice(g.ETFrili)
    if holdsig > 0:
        print('持股不动')
        return
    else:
        return (sell_the_stocks(context),log.info("Buying %s"% signal ),order_value(signal, context.portfolio.cash))
'''
=================================================
每日收盘后（本策略中不需要）
=================================================
'''  
def after_trading_end(context):
    return

