# 风险及免责提示：该策略由聚宽用户分享，仅供学习交流使用。
# 原文一般包含策略说明，如有疑问建议到原文和作者交流讨论。
# 克隆自聚宽文章：https://www.joinquant.com/post/23023
# 标题：穿越十年牛熊：沪深300成分股配合macd的价投择时策略
# 作者：etrobot

# 技术分析同好可加we交流franklin754
import numpy as np
from jqdata import *
import talib
from datetime import datetime, date
# 初始化函数，设定基准等等
def initialize(context):
    set_option("avoid_future_data", True)
    # 设定沪深300作为基准
    set_benchmark('000300.XSHG')
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 过滤掉order系列API产生的比error级别低的log
    log.set_level('order','error')
    g.runtime='9:30'
    g.idx='000300.XSHG'
    g.buylist=[]
    g.idxwarn=False
    ### 股票相关设定 ###
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    
    ## 运行函数（reference_security为运行时间的参考标的；传入的标的只做种类区分，因此传入'000300.XSHG'或'510300.XSHG'是一样的）
      # 开盘前运行
    # run_daily(before_market_open, time='before_open', reference_security='000300.XSHG') 
      # 开盘时运行
    # run_daily(market_open, time='open', reference_security='000300.XSHG')
      # 收盘后运行
    # run_daily(after_market_close, time='15:00', reference_security='000300.XSHG')
      # 开盘时运行
    run_daily(deal, time=g.runtime, reference_security='000300.XSHG')

def kData(context,stock,countNum):
    return attribute_history(stock,count = countNum, unit='1d'
        , fields=['open', 'close', 'high', 'low', 'volume', 'money','high_limit','low_limit']
        , skip_paused=True
        , df=False
        , fq='pre')

def macdSignal(context,idx='000001.XSHG'):
    pdata=kData(context,idx,40)
    idxc=pdata['close']
    price = array(idxc)
    macd = talib.MACD(price, fastperiod=5, slowperiod=15, signalperiod=7)[-1]

    if sum(macd[-15:])>0:
        if sum([x>0 for x in macd[-15:-5]])>4:
            if idx=='000001.XSHG' and macd[-1]>0:
                return 0
            elif sum(macd[-5:])>0:
                    return (sum(macd[-15:])-abs(sum(macd[-5:])))*100
    return 2

## 开盘时运行函数
def deal(context):
    holdnum=3
    g.idxwarn = macdSignal(context)
    
    stock_count=len(list(context.portfolio.positions.keys()))
    if stock_count > 0 and g.idxwarn >2:
        for stock in context.portfolio.positions:
            order_target(stock,0)
    
    if g.idxwarn != 0 or stock_count>holdnum:
        return
    
    g.buylist=[]

    q = query(
            valuation.code,
            valuation.pe_ratio,
            # valuation.circulating_market_cap,
            valuation.circulating_cap
        ).filter(
            valuation.code.in_(get_index_stocks(g.idx))
        # ).order_by(
        #     valuation.pe_ratio.asc()
        )
    
    df = get_fundamentals(q)
    # df = df.dropna(subset=["pe_ratio"])
    for s in df.code.tolist():
        msig=macdSignal(context,s)
        if msig>2:
            g.buylist.append([s,msig])

        
    if len(g.buylist)==0:
        return
    
    g.buylist=sorted(g.buylist,key=lambda x:x[1],reverse=False)[:holdnum-stock_count+1]
    
    cash = context.portfolio.total_value/len(g.buylist)
    for s in g.buylist:
        stock=s[0]
        order_value(stock, cash)

  